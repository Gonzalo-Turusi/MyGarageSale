@page "/admin/dashboard"
@using MyGarageSale.Services
@using MyGarageSale.Models
@using Microsoft.AspNetCore.Components.Forms
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject ICategoryService CategoryService
@inject IItemService ItemService
@rendermode InteractiveServer

<PageTitle>Dashboard Admin - MyGarageSale</PageTitle>

@if (!isAuthenticated && !authChecked)
{
    <div class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
        <div class="text-center">
            <div class="animate-spin rounded-full h-16 w-16 border-4 border-blue-500 border-t-transparent mx-auto"></div>
            <p class="mt-4 text-gray-600 font-medium">Cargando panel de administración...</p>
        </div>
    </div>
}
else if (!isAuthenticated && authChecked)
{
    <div class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
        <div class="text-center">
            <p class="text-gray-600">Redirigiendo al login...</p>
        </div>
    </div>
}
else
{
    <div class="min-h-screen bg-gradient-to-br from-gray-50 via-blue-50 to-indigo-50">
        <!-- Header Mejorado -->
        <header class="bg-white/80 backdrop-blur-lg border-b border-gray-200/50 sticky top-0 z-50">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="flex justify-between items-center py-4">
                    <div class="flex items-center space-x-4">
                        <div class="bg-gradient-to-r from-blue-600 to-purple-600 p-3 rounded-xl">
                            <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-6m-8 0H3m2 0h6M9 7h6m-6 4h6m-6 4h6"/>
                            </svg>
                        </div>
                        <div>
                            <h1 class="text-2xl font-bold bg-gradient-to-r from-gray-900 to-gray-700 bg-clip-text text-transparent">
                                Panel de Administración
                            </h1>
                            <p class="text-sm text-gray-500 font-medium">Gestiona tu venta de garaje</p>
                        </div>
                    </div>
                    <div class="flex items-center space-x-3">
                        <a href="/" class="inline-flex items-center px-4 py-2 text-sm font-medium text-blue-600 bg-blue-50 hover:bg-blue-100 rounded-lg transition-colors duration-200">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                            </svg>
                            Ver catálogo
                        </a>
                        <button @onclick="HandleLogout" 
                                class="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 rounded-lg shadow-lg hover:shadow-xl transition-all duration-200 transform hover:scale-105">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"/>
                            </svg>
                            Cerrar sesión
                        </button>
                    </div>
                </div>
            </div>
        </header>

        <!-- Main Content -->
        <main class="max-w-7xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
            <!-- Navigation Tabs Mejoradas -->
            <div class="mb-8">
                <div class="bg-white/70 backdrop-blur-lg rounded-2xl shadow-xl border border-white/20 overflow-hidden">
                    <nav class="flex flex-col sm:flex-row">
                        <button @onclick="() => SetActiveTab(AdminTab.Items)"
                                class="@GetTabClasses(AdminTab.Items) flex-1 px-4 sm:px-6 py-3 sm:py-4 text-xs sm:text-sm font-semibold text-center transition-all duration-300 transform hover:scale-105">
                            <div class="flex items-center justify-center">
                                <div class="@GetTabIconClasses(AdminTab.Items) p-1.5 sm:p-2 rounded-lg mr-2 sm:mr-3">
                                    <svg class="w-4 h-4 sm:w-5 sm:h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                                    </svg>
                                </div>
                                <span class="hidden sm:inline">Administrar Artículos</span>
                                <span class="sm:hidden">Artículos</span>
                            </div>
                        </button>
                        
                        <button @onclick="() => SetActiveTab(AdminTab.Categories)"
                                class="@GetTabClasses(AdminTab.Categories) flex-1 px-4 sm:px-6 py-3 sm:py-4 text-xs sm:text-sm font-semibold text-center transition-all duration-300 transform hover:scale-105">
                            <div class="flex items-center justify-center">
                                <div class="@GetTabIconClasses(AdminTab.Categories) p-1.5 sm:p-2 rounded-lg mr-2 sm:mr-3">
                                    <svg class="w-4 h-4 sm:w-5 sm:h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                                    </svg>
                                </div>
                                <span class="hidden sm:inline">Administrar Categorías</span>
                                <span class="sm:hidden">Categorías</span>
                            </div>
                        </button>
                        
                        <button @onclick="() => SetActiveTab(AdminTab.Requests)"
                                class="@GetTabClasses(AdminTab.Requests) flex-1 px-4 sm:px-6 py-3 sm:py-4 text-xs sm:text-sm font-semibold text-center transition-all duration-300 transform hover:scale-105">
                            <div class="flex items-center justify-center">
                                <div class="@GetTabIconClasses(AdminTab.Requests) p-1.5 sm:p-2 rounded-lg mr-2 sm:mr-3">
                                    <svg class="w-4 h-4 sm:w-5 sm:h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                                    </svg>
                                </div>
                                <span class="hidden sm:inline">Ver Solicitudes</span>
                                <span class="sm:hidden">Solicitudes</span>
                            </div>
                        </button>
                    </nav>
                </div>
            </div>

            <!-- Tab Content con mejor estilo -->
            <div class="bg-white/70 backdrop-blur-lg rounded-2xl shadow-2xl border border-white/20 overflow-hidden">
                @switch (activeTab)
                {
                    case AdminTab.Items:
                        <AdminItems @ref="adminItemsRef" OnRequestEdit="OpenModal" />
                        break;
                    case AdminTab.Categories:
                        <AdminCategories />
                        break;
                    case AdminTab.Requests:
                        <AdminRequests />
                        break;
                }
            </div>
        </main>

        @if (showModal)
        {
            <ItemModal 
                Visible="@showModal"
                Item="@editingItem"
                Categories="@allCategories"
                IsEdit="@(editingItem?.Id > 0)"
                OnClose="EventCallback.Factory.Create(this, CloseModal)"
                OnSave="EventCallback.Factory.Create(this, SaveItem)" />
        }
    </div>
}

@code {
    private bool isAuthenticated = false;
    private bool authChecked = false;
    private AdminTab activeTab = AdminTab.Items;
    
    // Estado del modal
    private bool showModal = false;
    private Item editingItem = new();
    private List<Category> allCategories = new();
    
    // Referencia al componente AdminItems para refrescar la lista
    private AdminItems? adminItemsRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isAuthenticated = await AuthService.IsAuthenticatedAsync();
            authChecked = true;
            
            if (!isAuthenticated)
            {
                Navigation.NavigateTo("/admin/login");
            }
            else
            {
                // Cargar categorías para el modal
                allCategories = await CategoryService.GetAllCategoriesAsync();
            }
            
            StateHasChanged();
        }
    }

    private async Task HandleLogout()
    {
        await AuthService.LogoutAsync();
        Navigation.NavigateTo("/admin/login");
    }

    private void SetActiveTab(AdminTab tab)
    {
        activeTab = tab;
        StateHasChanged();
    }

    private string GetTabClasses(AdminTab tab)
    {
        return tab == activeTab 
            ? "text-white bg-gradient-to-r from-blue-600 to-purple-600 shadow-lg" 
            : "text-gray-600 hover:text-gray-800 hover:bg-gray-100/50";
    }

    private string GetTabIconClasses(AdminTab tab)
    {
        return tab == activeTab 
            ? "bg-white/20 text-white" 
            : "bg-gray-100 text-gray-500";
    }

    private enum AdminTab
    {
        Items,
        Categories,
        Requests
    }

    // Métodos del modal
    private async Task OpenModal(Item item)
    {
        // Si es edición, obtener el item completo del backend
        if (item.Id > 0)
        {
            var itemCompleto = await ItemService.GetItemByIdAsync(item.Id);
            if (itemCompleto != null)
                editingItem = itemCompleto;
            else
                editingItem = item;
        }
        else
        {
            editingItem = new Item();
        }
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        editingItem = new Item();
    }

    private async Task SaveItem()
    {
        // El guardado se maneja en el modal ItemModal.razor
        // Este método se llama cuando se completa el guardado exitosamente
        CloseModal();
        
        // Refrescar la lista de artículos después de guardar
        if (adminItemsRef != null)
        {
            await adminItemsRef.RefreshData();
        }
    }
} 