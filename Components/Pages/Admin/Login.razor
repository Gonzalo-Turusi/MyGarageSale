@page "/admin"
@page "/admin/login"
@using MyGarageSale.Services
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Admin Login - MyGarageSale</PageTitle>

<div class="min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8">
    <div class="sm:mx-auto sm:w-full sm:max-w-md">
        <div class="text-center">
            <h2 class="mt-6 text-3xl font-extrabold text-gray-900">
                Panel de Administración
            </h2>
            <p class="mt-2 text-sm text-gray-600">
                Inicia sesión para gestionar tu venta de garaje
            </p>
        </div>
    </div>

    <div class="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
        <div class="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
            <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin" FormName="AdminLoginForm" class="space-y-6">
                <DataAnnotationsValidator />
                
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
                        <span class="block sm:inline">@errorMessage</span>
                    </div>
                }

                <div>
                    <label for="username" class="block text-sm font-medium text-gray-700">
                        Usuario
                    </label>
                    <div class="mt-1">
                        <InputText @bind-Value="loginModel.Username" 
                                   id="username"
                                   class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                                   placeholder="Ingresa tu usuario" />
                        <ValidationMessage For="@(() => loginModel.Username)" class="text-red-600 text-sm mt-1" />
                    </div>
                </div>

                <div>
                    <label for="password" class="block text-sm font-medium text-gray-700">
                        Contraseña
                    </label>
                    <div class="mt-1 relative">
                        <InputText @bind-Value="loginModel.Password" 
                                   type="@(showPassword ? "text" : "password")"
                                   id="password"
                                   class="appearance-none block w-full px-3 py-2 pr-10 border border-gray-300 rounded-md placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                                   placeholder="Ingresa tu contraseña" />
                        <button type="button" 
                                @onclick="TogglePasswordVisibility"
                                class="absolute inset-y-0 right-0 pr-3 flex items-center">
                            @if (showPassword)
                            {
                                <!-- Eye slash icon (hide) -->
                                <svg class="h-5 w-5 text-gray-400 hover:text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21"></path>
                                </svg>
                            }
                            else
                            {
                                <!-- Eye icon (show) -->
                                <svg class="h-5 w-5 text-gray-400 hover:text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                                </svg>
                            }
                        </button>
                        <ValidationMessage For="@(() => loginModel.Password)" class="text-red-600 text-sm mt-1" />
                    </div>
                </div>

                <div>
                    <button type="submit" 
                            disabled="@isLoading"
                            class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed">
                        @if (isLoading)
                        {
                            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            <span>Iniciando sesión...</span>
                        }
                        else
                        {
                            <span>Iniciar Sesión</span>
                        }
                    </button>
                </div>
            </EditForm>

            <div class="mt-6">
                <div class="text-center">
                    <a href="/" class="text-blue-600 hover:text-blue-500 text-sm">
                        ← Volver al catálogo
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private LoginModel loginModel { get; set; } = new();
    
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private bool showPassword = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Si ya está autenticado, redirigir al dashboard
            if (await AuthService.IsAuthenticatedAsync())
            {
                Navigation.NavigateTo("/admin/dashboard");
            }
        }
    }

    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            StateHasChanged();

            var success = await AuthService.LoginAsync(loginModel.Username, loginModel.Password);
            
            if (success)
            {
                Navigation.NavigateTo("/admin/dashboard");
            }
            else
            {
                errorMessage = "Usuario o contraseña incorrectos. Inténtalo de nuevo.";
            }
        }
        catch (Exception)
        {
            errorMessage = "Error al iniciar sesión. Por favor, inténtalo de nuevo.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "El usuario es requerido")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "La contraseña es requerida")]
        public string Password { get; set; } = string.Empty;
    }
} 