@page "/item/{Id:int}"
@using MyGarageSale.Models
@using MyGarageSale.Services
@using MyGarageSale.Components
@inject IItemService ItemService
@inject ICartService CartService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@implements IDisposable
@rendermode InteractiveServer

<PageTitle>@(item?.Title ?? "Artículo") - Venta Gonza y Yenny</PageTitle>

@if (isLoading)
{
    <div class="flex justify-center items-center py-16">
        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600"></div>
        <span class="ml-3 text-lg text-gray-600">Cargando artículo...</span>
    </div>
}
else if (item == null)
{
    <div class="text-center py-16">
        <h1 class="text-2xl font-bold text-gray-900 mb-4">Artículo no encontrado</h1>
        <p class="text-gray-600 mb-6">El artículo que buscas no existe o ha sido eliminado.</p>
        <button @onclick="GoToCatalog" 
                class="bg-indigo-600 hover:bg-indigo-700 text-white px-6 py-3 rounded-lg font-medium transition-colors">
            Volver al Catálogo
        </button>
    </div>
}
else
{
    <div class="max-w-6xl mx-auto">
        <!-- Breadcrumb -->
        <nav class="mb-6">
            <ol class="flex items-center space-x-2 text-sm text-gray-500">
                <li><a href="/" class="hover:text-indigo-600">Inicio</a></li>
                <li>/</li>
                <li><span class="text-indigo-600">@item.Category?.Name</span></li>
                <li>/</li>
                <li class="text-gray-900">@item.Title</li>
            </ol>
        </nav>

        <div class="grid lg:grid-cols-2 gap-8">
            <!-- Carrusel de imágenes -->
            <div class="space-y-4">
                <ImageCarousel Images="@(item.Images?.ToList() ?? new List<ItemImage>())" 
                              ItemTitle="@item.Title" />
            </div>

            <!-- Información del producto -->
            <div class="space-y-6">
                <!-- Título y categoría -->
                <div>
                    <div class="flex items-center gap-3 mb-2">
                        <span class="inline-flex px-3 py-1 text-sm font-semibold rounded-full bg-indigo-100 text-indigo-800">
                            @item.Category?.Name
                        </span>
                        @if (item.IsSold)
                        {
                            <span class="inline-flex px-3 py-1 text-sm font-bold rounded-full bg-red-100 text-red-800">
                                VENDIDO
                            </span>
                        }
                    </div>
                    <h1 class="text-3xl font-bold @(item.IsSold ? "text-gray-500" : "text-gray-900") mb-2">@item.Title</h1>
                </div>

                <!-- Precio -->
                <div class="border-t border-gray-200 pt-6">
                    <div class="flex items-center gap-2">
                        <span class="text-4xl font-bold @(item.IsSold ? "text-gray-400" : "text-gray-800")">$@item.Price.ToString("F2")</span>
                    </div>
                </div>

                <!-- Interesados -->
                @if (item.InterestedCount > 0)
                {
                    <div class="border-t border-gray-200 pt-6">
                        <div class="flex items-center gap-2 text-orange-600">
                            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z"></path>
                            </svg>
                            <span class="font-medium">@item.InterestedCount persona@(item.InterestedCount == 1 ? "" : "s") interesada@(item.InterestedCount == 1 ? "" : "s")</span>
                        </div>
                    </div>
                }

                <!-- Descripción -->
                @if (!string.IsNullOrEmpty(item.Description))
                {
                    <div class="border-t border-gray-200 pt-6">
                        <h3 class="text-lg font-semibold text-gray-900 mb-3">Descripción</h3>
                        <div class="prose prose-sm max-w-none text-gray-700">
                            @foreach (var paragraph in item.Description.Split('\n', StringSplitOptions.RemoveEmptyEntries))
                            {
                                <p class="mb-2">@paragraph</p>
                            }
                        </div>
                    </div>
                }

                <!-- Información adicional -->
                <div class="border-t border-gray-200 pt-6">
                    <h3 class="text-lg font-semibold text-gray-900 mb-3">Información adicional</h3>
                    <dl class="grid grid-cols-1 gap-3 text-sm">
                        <div class="flex justify-between">
                            <dt class="text-gray-600">Estado:</dt>
                            <dd class="font-medium @(item.IsSold ? "text-red-600" : "text-green-600")">
                                @(item.IsSold ? "Vendido" : "Disponible")
                            </dd>
                        </div>
                        <div class="flex justify-between">
                            <dt class="text-gray-600">Categoría:</dt>
                            <dd class="font-medium text-gray-900">@item.Category?.Name</dd>
                        </div>
                    </dl>
                </div>

                <!-- Acciones -->
                <div class="border-t border-gray-200 pt-6">
                    <div class="flex flex-col items-center space-y-3 max-w-sm mx-auto">
                    @if (!item.IsSold)
                    {
                        @if (IsInCart)
                        {
                            <button @onclick="RemoveFromCart" 
                                    class="w-full bg-red-600 hover:bg-red-700 text-white py-3 px-6 rounded-lg font-medium transition-colors duration-200 flex items-center justify-center gap-2">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                </svg>
                                Quitar del Carrito
                            </button>
                        }
                        else
                        {
                            <button @onclick="AddToCart" 
                                        class="w-full bg-indigo-600 hover:bg-indigo-700 text-white py-3 px-6 rounded-lg font-medium transition-colors duration-200 flex items-center justify-center gap-2">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5 5M7 13l2.5 5m0 0h8m-8 0a2 2 0 100 4 2 2 0 000-4zm8 0a2 2 0 100 4 2 2 0 000-4z"></path>
                                </svg>
                                Agregar al Carrito
                            </button>
                        }
                    }
                    else
                    {
                            <div class="w-full bg-gray-100 text-gray-500 py-3 px-6 rounded-lg font-medium text-center border border-gray-300">
                                No disponible
                        </div>
                    }
                    
                    <button @onclick="GoToCatalog" 
                                class="w-full bg-white hover:bg-gray-50 text-indigo-600 border border-indigo-600 py-2.5 px-6 rounded-lg font-medium transition-colors">
                        Volver al Catálogo
                    </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int Id { get; set; }
    
    private Item? item;
    private bool isLoading = true;
    private bool IsInCart = false;
    private bool hasRendered = false;

    protected override void OnInitialized()
    {
        CartService.OnCartUpdated += UpdateCartState;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            hasRendered = true;
            CartService.InitializeAfterRender();
            await LoadItem();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (hasRendered)
        {
            await LoadItem();
        }
    }

    private async Task LoadItem()
    {
        isLoading = true;
        try
        {
            item = await ItemService.GetItemByIdAsync(Id);
            if (item != null && hasRendered)
            {
                await UpdateCartStatus();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading item: {ex.Message}");
            item = null;
        }
        finally
        {
            isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task UpdateCartStatus()
    {
        if (item != null && hasRendered)
        {
            IsInCart = await CartService.IsItemInCartAsync(item.Id);
        }
    }

    private async void UpdateCartState()
    {
        if (hasRendered)
        {
            await UpdateCartStatus();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task AddToCart()
    {
        if (item != null && !item.IsSold && hasRendered)
        {
            await CartService.AddToCartAsync(item);
        }
    }

    private async Task RemoveFromCart()
    {
        if (item != null && hasRendered)
        {
            await CartService.RemoveFromCartAsync(item.Id);
        }
    }

    private void GoToCatalog()
    {
        Navigation.NavigateTo("/");
    }
    
    public void Dispose()
    {
        CartService.OnCartUpdated -= UpdateCartState;
    }
} 