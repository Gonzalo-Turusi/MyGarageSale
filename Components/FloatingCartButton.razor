@using MyGarageSale.Services
@inject ICartService CartService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@implements IDisposable
@rendermode InteractiveServer

@if (cartCount > 0 && !isOnCartPage && !isOnAdminPage)
{
    <div class="fixed bottom-4 right-4 sm:bottom-6 sm:right-6 z-50 animate-bounce-in">
        <button @onclick="@(() => GoToCart())" 
                class="relative bg-blue-600 hover:bg-blue-700 text-white p-3 sm:p-4 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-110 focus:outline-none focus:ring-4 focus:ring-blue-300 animate-pulse-slow"
                aria-label="Ver carrito de compras (@cartCount productos)">
            <!-- Icono del carrito -->
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                      d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5 5M7 13l2.5 5m0 0h8m-8 0a2 2 0 100 4 2 2 0 000-4zm8 0a2 2 0 100 4 2 2 0 000-4z">
                </path>
            </svg>
            
            <!-- Badge con el número de productos -->
            <span class="absolute -top-1 -right-1 sm:-top-2 sm:-right-2 bg-red-500 text-white text-xs font-bold rounded-full h-5 w-5 sm:h-6 sm:w-6 flex items-center justify-center border-2 border-white shadow-md">
                @cartCount
            </span>
            
            <!-- Texto opcional para pantallas más grandes -->
            <span class="sr-only">Ver carrito (@cartCount productos)</span>
        </button>
        
        <!-- Tooltip opcional -->
        <div class="absolute -top-12 left-1/2 transform -translate-x-1/2 bg-gray-800 text-white text-sm px-3 py-1 rounded-lg opacity-0 hover:opacity-100 transition-opacity duration-300 pointer-events-none">
            Ver carrito
        </div>
    </div>
}

@code {
    private int cartCount = 0;
    private bool isOnCartPage = false;
    private bool isOnAdminPage = false;
    private bool hasRendered = false;

    protected override void OnInitialized()
    {
        CartService.OnCartUpdated += OnCartUpdated;
        UpdateCurrentPageStatus();
        
        // Suscribirse a cambios de navegación
        Navigation.LocationChanged += OnLocationChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            hasRendered = true;
            CartService.InitializeAfterRender();
            await UpdateCartCount();
        }
    }

    private async void OnCartUpdated()
    {
        if (hasRendered)
        {
            await UpdateCartCount();
        }
    }

    private async Task UpdateCartCount()
    {
        if (hasRendered)
        {
            cartCount = await CartService.GetCartCountAsync();
            await InvokeAsync(StateHasChanged);
        }
    }

    private void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        UpdateCurrentPageStatus();
        InvokeAsync(StateHasChanged);
    }

    private void UpdateCurrentPageStatus()
    {
        var currentUri = Navigation.Uri;
        isOnCartPage = currentUri.Contains("/cart");
        isOnAdminPage = currentUri.Contains("/admin");
    }

    private void GoToCart()
    {
        Navigation.NavigateTo("/cart");
    }

    public void Dispose()
    {
        CartService.OnCartUpdated -= OnCartUpdated;
        Navigation.LocationChanged -= OnLocationChanged;
    }
} 