@using MyGarageSale.Models
@using MyGarageSale.Services
@inject ICartService CartService
@inject NavigationManager Navigation
@implements IDisposable
@rendermode InteractiveServer

<div class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300">
    <!-- Imagen principal -->
    <div class="relative w-full h-48 bg-gray-100 rounded-t-lg overflow-hidden @(Item.IsSold ? "" : "cursor-pointer")" @onclick="HandleImageClick">
        <img src="@GetImagePath()" 
             alt="@Item.Title" 
             class="w-full h-full object-cover @(Item.IsSold ? "sold-grayscale" : "transition-transform duration-300 hover:scale-105")"
             onerror="this.src='https://via.placeholder.com/400x400/e5e7eb/6b7280?text=Sin+Imagen'" />
        
        @if (Item.IsSold)
        {
            <!-- Badge VENDIDO -->
            <div class="absolute top-2 left-2 z-10">
                <span class="inline-flex px-2 py-1 text-xs font-bold rounded-full bg-red-600 text-white shadow-lg">
                    VENDIDO
                </span>
            </div>
        }
        else
        {
            <!-- Badge de categor칤a (siempre visible en esquina izquierda) -->
            <div class="absolute top-2 left-2 z-10">
                <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-indigo-100 text-indigo-800">
                    @Item.Category?.Name
                </span>
            </div>
        }
        
        <!-- Badge NEW (esquina superior derecha) - solo si no est치 vendido y es NEW -->
        @if (Item.IsNew && !Item.IsSold)
        {
            <div style="position: absolute; top: 8px; right: 8px; z-index: 10;">
                <span class="inline-flex px-2 py-1 text-xs font-bold rounded-full bg-red-600 text-white shadow-lg">
                    NEW
                </span>
            </div>
        }
        
        <!-- Badge HOT (esquina superior derecha) - solo si no est치 vendido, es HOT y no es NEW -->
        @if (Item.IsHot && !Item.IsSold && !Item.IsNew)
        {
            <div style="position: absolute; top: 8px; right: 8px; z-index: 10;">
                <span class="inline-flex px-2 py-1 text-xs font-bold rounded-full text-pink-700 shadow-sm animate-pulse border border-pink-200" 
                      style="background-color: rgba(253, 242, 248, 0.8);">
                    游댠 HOT
                </span>
            </div>
        }
    </div>
    
    <!-- Contenido de la tarjeta -->
    <div class="p-4">
        <!-- T칤tulo (clickeable) -->
        <h3 class="font-semibold text-lg text-gray-900 mb-2 line-clamp-2 leading-snug @(Item.IsSold ? "" : "cursor-pointer hover:text-indigo-600 transition-colors")" 
            @onclick="HandleTitleClick">
            @Item.Title
        </h3>
        
        <!-- Precio -->
        <div class="flex items-center justify-between mb-3">
            @if (Item.ShowDiscount && Item.MarketPrice.HasValue && Item.MarketPrice.Value > Item.Price)
            {
                <div class="flex items-center gap-2">
                    <span class="text-lg font-semibold text-gray-400 line-through !line-through">$@Item.MarketPrice.Value.ToString("F2")</span>
                    <span class="text-2xl font-bold text-gray-900">$@Item.Price.ToString("F2")</span>
                    <span class="inline-flex px-2 py-0.5 text-xs font-bold rounded-full bg-red-100 text-red-700 border border-red-200 ml-1">
                        @((int)Math.Round((Item.MarketPrice.Value - Item.Price) / Item.MarketPrice.Value * 100))% OFF
                    </span>
                </div>
            }
            else
            {
                <span class="text-2xl font-bold text-gray-900">$@Item.Price.ToString("F2")</span>
            }
        </div>
        
        <!-- Bot칩n de acci칩n -->
        <div class="flex items-center justify-center">
            @if (Item.IsSold)
            {
                <div class="w-full bg-gray-100 text-gray-500 py-2.5 px-4 rounded-lg font-medium text-center border border-gray-300">
                    No disponible
                </div>
            }
            else if (IsInCart)
            {
                <button @onclick="RemoveFromCart" 
                        class="w-full bg-red-600 hover:bg-red-700 text-white py-2.5 px-4 rounded-lg font-medium transition-colors flex items-center justify-center gap-2">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                    </svg>
                    Quitar del carrito
                </button>
            }
            else
            {
                <button @onclick="AddToCart" 
                        class="w-full bg-indigo-600 hover:bg-indigo-700 text-white py-2.5 px-4 rounded-lg font-medium transition-colors flex items-center justify-center gap-2">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5 5M7 13l2.5 5m0 0h8m-8 0a2 2 0 100 4 2 2 0 000-4zm8 0a2 2 0 100 4 2 2 0 000-4z"></path>
                    </svg>
                    Agregar al carrito
                </button>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public Item Item { get; set; } = null!;
    
    private bool IsInCart = false;
    private bool hasRendered = false;
    
    protected override void OnInitialized()
    {
        CartService.OnCartUpdated += OnCartUpdated;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            hasRendered = true;
            CartService.InitializeAfterRender();
            await UpdateCartStatus();
        }
    }
    
    private async Task UpdateCartStatus()
    {
        if (hasRendered)
        {
            IsInCart = await CartService.IsItemInCartAsync(Item.Id);
            await InvokeAsync(StateHasChanged);
        }
    }
    
    private async void OnCartUpdated()
    {
        if (hasRendered)
        {
            await UpdateCartStatus();
        }
    }
    
    private string GetImagePath()
    {
        // Prioridad: 1) Imagen principal de la colecci칩n, 2) ImagePath legacy, 3) placeholder
        var mainImage = Item.MainImagePath ?? Item.ImagePath;
        
        if (string.IsNullOrEmpty(mainImage))
            return "https://via.placeholder.com/400x400/e5e7eb/6b7280?text=Sin+Imagen";
            
        // Si es una ruta relativa, agregar el prefijo para im치genes locales
        if (!mainImage.StartsWith("http") && !mainImage.StartsWith("/"))
            return $"/uploads/{mainImage}";
            
        return mainImage;
    }
    
    private async Task AddToCart()
    {
        if (!Item.IsSold && !IsInCart && hasRendered)
        {
            await CartService.AddToCartAsync(Item);
        }
    }
    
    private async Task RemoveFromCart()
    {
        if (hasRendered)
        {
            await CartService.RemoveFromCartAsync(Item.Id);
        }
    }
    
    private void GoToDetail()
    {
        Navigation.NavigateTo($"/item/{Item.Id}");
    }
    
    private void HandleImageClick()
    {
        if (!Item.IsSold)
        {
            GoToDetail();
        }
    }
    
    private void HandleTitleClick()
    {
        if (!Item.IsSold)
        {
            GoToDetail();
        }
    }
    
    public void Dispose()
    {
        CartService.OnCartUpdated -= OnCartUpdated;
    }
} 